@page "/team-manager"
@using PokeBuilderMAUI.Shared.Models
@using Newtonsoft.Json.Linq

<h3>TeamManager</h3>
@inject HttpClient Client

<p>Please log in to see your Teams!</p>

@code {
    public Pokemon[] team = new Pokemon[6];
    public int iterable = 0;
}

<input type="text" @bind="pokename" />
<button @onclick="AddPokemon">Add Pokemon</button>

@for (int i = 0; i < 6; i++)
{
    if (team[i] != null)
    {
        <_TeamMemberPartial pokemon="team[i]" />
    }
    if (team != null)
    {
        <_FullTeamPartial  />
    }

    @*     if (team[i] != null && team[i].Ability != null && team[i].Move1 != null && team[i].Move2 != null && team[i].Move3 != null && team[i].Move4 != null)
    {
        <_FullTeamPartial team[i]/>
    } *@
}

@code {
    private string? pokename;

    private async Task AddPokemon()
    {
        try
        {
            HttpResponseMessage data = await Client.GetAsync($"{Client.BaseAddress}/{pokename.ToLower()}");

            string content = await data.Content.ReadAsStringAsync();
            JObject json = JObject.Parse(content);

            string name = json["name"].ToString();
            name = FormatString(name);

            Models.Type primary = Enum.TryParse((json["types"][0]["type"]["name"].ToString().ToUpper()), out primary) ? primary : Models.Type.TYPELESS;

            Models.Type secondary = Models.Type.TYPELESS;
            try
            {
                secondary = Enum.TryParse((json["types"][1]["type"]["name"].ToString().ToUpper()), out secondary) ? secondary : Models.Type.TYPELESS;
            }
            catch (ArgumentOutOfRangeException aoore)
            {
                secondary = Models.Type.TYPELESS;
            }
            ;

            List<string> abilities = new List<string>();
            bool hasMoreAbilities = true;
            int a = 0;
            do
            {
                string ability = "null";

                try
                {
                    ability = json["abilities"][a]["ability"]["name"].ToString();
                    ability = FormatString(ability);
                }
                catch (ArgumentOutOfRangeException aoore)
                {
                    hasMoreAbilities = false;
                }


                if (hasMoreAbilities)
                {
                    abilities.Add(ability);
                    a++;
                }
            }
            while (hasMoreAbilities);

            List<string> moves = new List<string>();
            bool hasMoreMoves = true;
            int m = 0;
            do
            {
                string move = "null";

                try
                {
                    move = json["moves"][m]["move"]["name"].ToString();
                    move = FormatString(move);
                }
                catch (ArgumentOutOfRangeException aoore)
                {
                    hasMoreMoves = false;
                }
                ;

                if (hasMoreMoves)
                {
                    moves.Add(move);
                    m++;
                }
            }
            while (hasMoreMoves);

            int hp = int.Parse(json["stats"][0]["base_stat"].ToString());
            int atk = int.Parse(json["stats"][1]["base_stat"].ToString());
            int def = int.Parse(json["stats"][2]["base_stat"].ToString());
            int spatk = int.Parse(json["stats"][3]["base_stat"].ToString());
            int spdef = int.Parse(json["stats"][4]["base_stat"].ToString());
            int spd = int.Parse(json["stats"][5]["base_stat"].ToString());

            string image = json["sprites"]["other"]["official-artwork"]["front_default"].ToString();

            int natDex = int.Parse(json["id"].ToString());

            Pokemon pokemon = new Pokemon(name, primary, secondary, null, moves, hp, atk, def, spatk, spdef, spd, image, natDex);

            pokemon.Abilities = abilities;

            for (int i = 0; i < 6; i++)
            {
                if (team[i] == null)
                {
                    team[i] = pokemon;
                    break;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Pokemon Not Found");
        }
    }
    public void SendPokemontToTeam()
    {
        //team[iterable]
    }

    private String FormatString(string toFormat)
    {
        if (toFormat.Contains("-"))
        {
            toFormat = toFormat.Replace("-", " ");
        }
        string toFormatFL = toFormat.Substring(0, 1).ToUpper();
        string toFormatFH;
        string toFormatLL = toFormat.Substring(toFormat.Length - 1, 1);
        if (toFormat.Contains(" "))
        {
            int spaceIndex = toFormat.IndexOf(" ");
            toFormatFH = toFormat.Substring(1, spaceIndex - 1);
            string toFormatSH = toFormat.Substring(spaceIndex, toFormat.Length - spaceIndex);
            string toFormatSHS = toFormat.Substring(spaceIndex, 1);
            string toFormatSHFL = toFormatSH.Substring(1, 1).ToUpper();
            string toFormatSHRL = toFormatSH.Substring(2, toFormatSH.Length - 2);
            toFormatSH = toFormatSHS + toFormatSHFL + toFormatSHRL;
            toFormat = toFormatFL + toFormatFH + toFormatSH;
        }
        else
        {
            toFormatFH = toFormat.Substring(1, toFormat.Length - 1);
            toFormat = toFormatFL + toFormatFH;
        }

        return toFormat;
    }
}


@page "/poke-api-test"
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
@using PokeBuilderMAUI.Shared.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Client

<h1>Call web API from a Blazor WebAssembly Razor component</h1>

@foreach (Pokemon pokemon in currentPokemon){
    <h1>@pokemon.Name</h1>
}


@code {
    private List<Pokemon> currentPokemon = new List<Pokemon>();
    private static string? name;
    private static Models.Type primary;
    private static Models.Type secondary = Models.Type.TYPELESS;
    private static string? ability;
    private static List<string>? abilities;
    private static List<string> moves;
    private static string[] finalMoves = new string[4];
    private static int baseHealth;
    private static int baseAttack;
    private static int baseDefense;
    private static int baseSPAttack;
    private static int baseSPDefense;
    private static int baseSpeed;
    private static string? image;

    protected override async Task OnInitializedAsync()
    {
        bool getPokmon = true;
        int currentIndex = 1;
        do
        {
            try
            {

                // data == get JSON object from requested URL
                var data = await Client.GetFromJsonAsync<JsonElement>($"{Client.BaseAddress}/{currentIndex}");

                //Set the string property above to the "name" property in the JSON object
                name = data.GetProperty("name").ToString();

                Pokemon pokemon = new Pokemon();
                
                currentPokemon.Add(pokemon);

                //primary = Enum.TryParse((data.GetProperty("types[0].type.name").ToString().ToUpper());
                currentIndex++;
            }
            catch (ArgumentNullException ane)
            {
                Console.WriteLine("No more Pokemon!");
                getPokmon = false;
            }

        } while (getPokmon);
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
@using System.Text.Json
@using System.Text.Json.Serialization
@using PokeBuilderMAUI.Shared.Models
@using Newtonsoft.Json.Linq


@inject HttpClient Client

<h1>CHOOSE YOUR POKEMON!!!!!!</h1>

@if (getPokmon){

    <p>Loading Pokemon #@currentIndex</p>
}

<p>
    @foreach (var pokemon in currentPokemon)
    {
        <CascadingValue Value="@pokemon" Name="pokemon">
            <ChildContent>
                <_PokemonPartial />
            </ChildContent>
        </CascadingValue>

    }

</p>


@code {
    private List<Pokemon>? currentPokemon = [];
    private int currentIndex = 1;
    private bool getPokmon = true;
    protected override async Task OnInitializedAsync()
    {
        while (getPokmon)
        {
            try
            {
                // data == get JSON object from requested URL\

                //var data = await Client.GetFromJsonAsync<JsonElement>($"{Client.BaseAddress}/{currentIndex}")
                HttpResponseMessage data = await Client.GetAsync($"{Client.BaseAddress}/{currentIndex}");

                string content = await data.Content.ReadAsStringAsync();
                JObject json = JObject.Parse(content);

                //Set the string properties in the JSON object

                string ability = json["abilities"][0]["ability"]["name"].ToString();
                string name = json["name"].ToString();

                string[] finalMoves = new string[4];
                finalMoves[0] = "tackle";
                finalMoves[1] = "leech seed";
                finalMoves[2] = "growl";
                finalMoves[3] = "rest";


                Pokemon pokemon = new Pokemon(name, Models.Type.GRASS, Models.Type.POISON, ability, finalMoves, 50, 50, 50, 50, 50, 50, "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/1.png");

                //Pokemon pokemon = new Pokemon(name, Models.Type.GRASS, Models.Type.GRASS, "cool", new string[4], 20, 20, 20, 20, 20, 20, "cool");

                currentPokemon.Add(pokemon);


                //primary = Enum.TryParse((data.GetProperty("types[0].type.name").ToString().ToUpper());

                currentIndex++;
                StateHasChanged();
                await InvokeAsync(StateHasChanged);
            }
            catch(Exception notFound)
            {
                getPokmon = false;
                await InvokeAsync(StateHasChanged);
            }
        }
        
       
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    }
}
